<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analysis Viewer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .content {
            padding: 40px;
        }

        .loading {
            text-align: center;
            padding: 60px 20px;
        }

        .loading h2 {
            color: #667eea;
            margin-bottom: 20px;
        }

        .person-card {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
        }

        .person-name {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .person-title {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 5px;
        }

        .person-company {
            font-size: 1rem;
            opacity: 0.8;
        }

        .claim-to-fame {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 30px;
            border-left: 5px solid #28a745;
        }

        .claim-to-fame h3 {
            color: #28a745;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .claim-to-fame p {
            line-height: 1.6;
            color: #333;
        }

        .section {
            background: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border-left: 5px solid #667eea;
        }

        .section-title {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .section-description {
            margin-bottom: 15px;
            line-height: 1.6;
            color: #333;
        }

        .evidence-list {
            list-style: none;
            padding: 0;
        }

        .evidence-list li {
            background: #f8f9fa;
            padding: 10px 15px;
            margin-bottom: 8px;
            border-radius: 8px;
            border-left: 3px solid #667eea;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 20px;
            border-radius: 10px;
            border-left: 5px solid #dc3545;
            margin-bottom: 20px;
        }

        .error h3 {
            margin-bottom: 10px;
        }

        /* Debug Section */
        #debug-section {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            border-left: 4px solid #007bff;
        }

        #debug-section h3 {
            margin-top: 0;
            color: #007bff;
            font-size: 1.1rem;
        }

        #debug-content {
            font-family: 'Courier New', monospace;
            font-size: 12px;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
            background: #fff;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Person Analysis</h1>
            <div class="subtitle">Extraordinary Individual Analysis Report</div>
        </div>
        
        <div class="content">
            <div id="loading" class="loading">
                <h2>Loading analysis data...</h2>
                <p>Please wait while we process the information.</p>
            </div>
            
            <div id="error" class="error" style="display: none;">
                <h3>Error Loading Data</h3>
                <p id="error-message"></p>
            </div>
            
            <!-- Debug Section -->
            <div id="debug-section" style="display: none; margin: 20px 0; padding: 15px; background: #f5f5f5; border-radius: 8px; border-left: 4px solid #007bff;">
                <h3 style="margin-top: 0; color: #007bff;">üîß Debug Information</h3>
                <div id="debug-content" style="font-family: monospace; font-size: 12px; white-space: pre-wrap; max-height: 300px; overflow-y: auto;"></div>
            </div>
            
            <div id="analysis-content" style="display: none;">
                <!-- Analysis content will be populated here -->
            </div>
        </div>
    </div>

    <script>
        // Debug display function
        function showDebug(message) {
            const debugSection = document.getElementById('debug-section');
            const debugContent = document.getElementById('debug-content');
            debugContent.textContent += message + '\n';
            debugSection.style.display = 'block';
        }

        // Function to parse and display the analysis data
        function displayAnalysis(data) {
            showDebug(`displayAnalysis called with data keys: ${Object.keys(data || {}).join(', ')}`);
            showDebug(`displayAnalysis data.Name: ${data?.Name || 'NOT FOUND'}`);
            showDebug(`displayAnalysis data["Extraordinary Analysis"]: ${data?.["Extraordinary Analysis"] ? 'FOUND' : 'NOT FOUND'}`);
            
            const contentDiv = document.getElementById('analysis-content');
            const loadingDiv = document.getElementById('loading');
            
            // Hide loading, show content
            loadingDiv.style.display = 'none';
            contentDiv.style.display = 'block';
            
            // Build the HTML content
            let html = `
                <div class="person-card">
                    <div class="person-name">${data.Name || 'Unknown Person'}</div>
                    <div class="person-title">Student at University of Illinois Urbana-Champaign</div>
                    <div class="person-company">Dual Degree: Computer Science + Chemistry & Bioengineering</div>
                </div>
                
                <div class="claim-to-fame">
                    <h3>üåü Claim to Fame</h3>
                    <p>${data.Conclusion || 'No claim to fame available'}</p>
                </div>
            `;
            
            // Add Extraordinary Analysis sections
            if (data["Extraordinary Analysis"]) {
                const analysis = data["Extraordinary Analysis"];
                
                // Add each analysis section
                Object.keys(analysis).forEach(sectionKey => {
                    const section = analysis[sectionKey];
                    html += `
                        <div class="section">
                            <h3 class="section-title">${sectionKey}</h3>
                            <p class="section-description">${section.Description}</p>
                            ${section.Evidence && section.Evidence.length > 0 ? `
                                <ul class="evidence-list">
                                    ${section.Evidence.map(evidence => `<li>${evidence}</li>`).join('')}
                                </ul>
                            ` : ''}
                        </div>
                    `;
                });
            }
            
            // Add voice recording section
            html += `
                <div class="voice-recording-section" style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 12px; border: 2px solid #e9ecef;">
                    <h3 style="margin-top: 0; color: #495057; margin-bottom: 15px;">üé§ Voice Recording</h3>
                    <p style="margin-bottom: 15px; color: #6c757d;">Ready to record a conversation? Click the button below to start recording. The recording will automatically stop after 5 seconds of silence.</p>
                    <button id="start-recording-btn" onclick="startVoiceRecording()" style="
                        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 8px;
                        font-size: 16px;
                        font-weight: 600;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
                    " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px rgba(40, 167, 69, 0.4)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 15px rgba(40, 167, 69, 0.3)'">
                        üé§ Start Recording
                    </button>
                    <div id="recording-status" style="margin-top: 15px; font-weight: 600; display: none;"></div>
                    <div id="recording-results" style="margin-top: 15px; display: none;"></div>
                </div>
            `;
            
            // Set the content
            contentDiv.innerHTML = html;
        }
        
        // Function to show error
        function showError(message) {
            const errorDiv = document.getElementById('error');
            const loadingDiv = document.getElementById('loading');
            const errorMessage = document.getElementById('error-message');
            
            loadingDiv.style.display = 'none';
            errorDiv.style.display = 'block';
            errorMessage.textContent = message;
        }

        // Get analysis data from API, URL parameters, or localStorage
        async function loadAnalysisData() {
            try {
                // First try to get data from the API
                try {
                    const response = await fetch('/api/latest-analysis');
                    showDebug(`API response status: ${response.status}`);
                    if (response.ok) {
                        const data = await response.json();
                        showDebug(`API response data keys: ${Object.keys(data).join(', ')}`);
                        showDebug(`Raw API response: ${JSON.stringify(data, null, 2)}`);
                        if (data.analysis) {
                            showDebug(`Raw analysis data: ${JSON.stringify(data.analysis, null, 2)}`);
                            showDebug(`Type of analysis: ${typeof data.analysis}`);
                            
                            // Parse the analysis data - handle the 'data' property structure
                            let analysisData;
                            if (data.analysis.data && typeof data.analysis.data === 'string') {
                                showDebug('Parsing string data from analysis.data');
                                try {
                                    analysisData = JSON.parse(data.analysis.data);
                                    showDebug('Successfully parsed analysis.data');
                                } catch (e) {
                                    showDebug(`Failed to parse analysis.data: ${e.message}`);
                                    analysisData = { data: data.analysis.data };
                                }
                            } else if (typeof data.analysis === 'string') {
                                showDebug('Parsing string data from analysis directly');
                                try {
                                    analysisData = JSON.parse(data.analysis);
                                    showDebug('Successfully parsed analysis directly');
                                } catch (e) {
                                    showDebug(`Failed to parse analysis directly: ${e.message}`);
                                    analysisData = { data: data.analysis };
                                }
                            } else {
                                showDebug('Using analysis data directly');
                                analysisData = data.analysis;
                            }
                            
                            showDebug(`Final parsed analysis data: ${JSON.stringify(analysisData, null, 2)}`);
                            
                            displayAnalysis(analysisData);
                            return;
                        } else {
                            showDebug('No analysis data found in API response');
                        }
                    } else {
                        showDebug(`API response not OK: ${response.status}`);
                    }
                } catch (apiError) {
                    showDebug(`API not available: ${apiError.message}`);
                }
                
                // Try to get data from URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                const analysisData = urlParams.get('data');
                if (analysisData) {
                    try {
                        const parsedData = JSON.parse(analysisData);
                        displayAnalysis(parsedData);
                        return;
                    } catch (e) {
                        showError('Invalid data in URL parameters');
                        return;
                    }
                }
                
                // Try to get data from localStorage
                const storedData = localStorage.getItem('analysisData');
                if (storedData) {
                    try {
                        const parsedData = JSON.parse(storedData);
                        displayAnalysis(parsedData);
                        return;
                    } catch (e) {
                        showError('Invalid data in localStorage');
                        return;
                    }
                }
                
                // If no data found, show error
                showError('No analysis data found. Please provide data via URL parameter or localStorage.');
                
            } catch (error) {
                showError('Error parsing analysis data: ' + error.message);
            }
        }
        
        // Load data when page loads
        document.addEventListener('DOMContentLoaded', loadAnalysisData);
        
        // Voice recording functions
        async function startVoiceRecording() {
            const button = document.getElementById('start-recording-btn');
            const statusDiv = document.getElementById('recording-status');
            const resultsDiv = document.getElementById('recording-results');
            
            try {
                // Disable button and show status
                button.disabled = true;
                button.textContent = 'üé§ Recording...';
                button.style.background = 'linear-gradient(135deg, #dc3545 0%, #c82333 100%)';
                statusDiv.style.display = 'block';
                statusDiv.textContent = 'üé§ Recording started! Speak now...';
                statusDiv.style.color = '#dc3545';
                
                // Start recording
                const response = await fetch('/api/start-voice-recording', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    statusDiv.textContent = '‚úÖ ' + result.message;
                    statusDiv.style.color = '#28a745';
                    
                    // Poll for results
                    pollForResults();
                } else {
                    statusDiv.textContent = '‚ùå ' + result.error;
                    statusDiv.style.color = '#dc3545';
                    resetButton();
                }
                
            } catch (error) {
                statusDiv.textContent = '‚ùå Error: ' + error.message;
                statusDiv.style.color = '#dc3545';
                resetButton();
            }
        }
        
        async function pollForResults() {
            const statusDiv = document.getElementById('recording-status');
            const resultsDiv = document.getElementById('recording-results');
            
            const pollInterval = setInterval(async () => {
                try {
                    const response = await fetch('/api/voice-status');
                    const status = await response.json();
                    
                    if (!status.isRecording && status.result) {
                        // Recording finished, show results
                        clearInterval(pollInterval);
                        displayVoiceResults(status.result);
                        resetButton();
                    }
                } catch (error) {
                    console.error('Error polling voice status:', error);
                }
            }, 1000);
            
            // Stop polling after 60 seconds
            setTimeout(() => {
                clearInterval(pollInterval);
                if (statusDiv.textContent.includes('Recording started')) {
                    statusDiv.textContent = '‚è∞ Recording timeout - please try again';
                    statusDiv.style.color = '#ffc107';
                    resetButton();
                }
            }, 60000);
        }
        
        function displayVoiceResults(result) {
            const statusDiv = document.getElementById('recording-status');
            const resultsDiv = document.getElementById('recording-results');
            
            if (result.success) {
                statusDiv.textContent = '‚úÖ Voice recording completed successfully!';
                statusDiv.style.color = '#28a745';
                
                resultsDiv.style.display = 'block';
                resultsDiv.innerHTML = `
                    <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 15px;">
                        <h4 style="margin-top: 0; color: #155724;">üìù Transcription:</h4>
                        <p style="margin-bottom: 15px; color: #155724;">${result.transcription || 'No transcription available'}</p>
                        
                        ${result.claudeResult ? `
                            <h4 style="color: #155724;">ü§ñ Extracted Information:</h4>
                            <div style="background: white; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                                <strong>Name:</strong> ${result.claudeResult.name || 'Not found'}<br>
                                <strong>Email:</strong> ${result.claudeResult.email || 'Not found'}<br>
                                <strong>Field:</strong> ${result.claudeResult.field || 'Not found'}<br>
                                <strong>Summary:</strong> ${result.claudeResult.summary || 'Not found'}
                            </div>
                        ` : ''}
                        
                        <p style="margin-bottom: 0; color: #155724; font-size: 14px;">
                            ‚úÖ Data has been saved to the database
                        </p>
                    </div>
                `;
            } else {
                statusDiv.textContent = '‚ùå Voice recording failed: ' + (result.error || 'Unknown error');
                statusDiv.style.color = '#dc3545';
            }
        }
        
        function resetButton() {
            const button = document.getElementById('start-recording-btn');
            button.disabled = false;
            button.textContent = 'üé§ Start Recording';
            button.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
        }
        
        // Listen for messages from parent window (if embedded)
        window.addEventListener('message', function(event) {
            if (event.data && event.data.type === 'analysisData') {
                displayAnalysis(event.data.data);
            }
        });
    </script>
</body>
</html>